{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","handleInput","e","onInputChange","target","value","handleSearch","apiUrl","query","s","key","axios","then","data","console","log","results","onSearch","setState","catch","err","alert","state","selected","bind","className","type","placeholder","onChange","this","onKeyPress","Component","Result","result","style","width","src","Poster","alt","Title","href","Results","class","map","imdbID","App","handleInputChange","val","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAqDeA,E,YAjDd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAUPC,YAAc,SAAAC,GACb,EAAKF,MAAMG,cAAcD,EAAEE,OAAOC,QAZhB,EAenBC,aAAe,SAACJ,GACf,IAAIK,EAAS,EAAKP,MAAMO,OACpBC,EAAK,UAAMD,EAAN,cAAkB,EAAKP,MAAMS,GACxB,UAAVP,EAAEQ,KACLC,IAAMH,GACLI,MAAK,YAAa,IAAXC,EAAU,EAAVA,KACPC,QAAQC,IAAIF,GACZ,IAAIG,EAAUH,EAAKd,OACnBe,QAAQC,IAAIC,GACZ,EAAKhB,MAAMiB,SAASD,GACpB,EAAKE,SAAU,CAACF,eAEhBG,OAAM,SAAAC,GACNC,MAAMD,OA1BR,EAAKE,MAAQ,CACZb,EAAG,GACHO,QAAS,GACTO,SAAU,IAGX,EAAKtB,YAAc,EAAKA,YAAYuB,KAAjB,gBARD,E,sEAkClB,OACC,kBAAC,WAAD,KACC,6BAASC,UAAU,qBAClB,2BAAQA,UAAY,YAClBC,KAAO,OACPC,YAAc,wBACdC,SAAYC,KAAK5B,YACjB6B,WAAcD,KAAKvB,qB,GA1CLyB,aC4BNC,E,iLA5BD,IACCC,EAAUJ,KAAK7B,MAAfiC,OACP,OAKM,yBAAKR,UAAU,OAAOS,MAAO,CAAEC,MAAO,UACpC,yBAAKV,UAAU,eAAeW,IAAKH,EAAOI,OAAQC,IAAI,mBACtD,yBAAKb,UAAU,aACb,wBAAIA,UAAU,cAAcQ,EAAOM,OACnC,uBAAGd,UAAU,aAAb,kGAKA,uBAAGe,KAAK,IAAIf,UAAU,mBAAtB,gBAGA,uBAAGe,KAAK,IAAIf,UAAU,mBAAtB,kB,GApBGM,aCqBNU,E,iLAlBD,IACCzB,EAAWa,KAAK7B,MAAhBgB,QACP,OACI,6BAASS,UAAU,mBACf,yBAAKiB,MAAM,aACP,yBAAKjB,UAAU,gBACVT,EAAQ2B,KAAI,SAAAV,GAAM,OACf,kBAAC,EAAD,CAAQvB,IAAKuB,EAAOW,OAAQX,OAAQA,c,GAT1CF,aC6CPc,E,YA3Cb,WAAY7C,GAAO,IAAD,8BAChB,4CAAMA,KAQR8C,kBAAoB,SAAAC,GAClB,EAAK7B,SAAS,CAAET,EAAEsC,KAVF,EAalBzC,aAAe,SAAAU,GACb,EAAKE,SAAS,CAAEF,aAZhB,EAAKM,MAAQ,CACdb,EAAG,GACHO,QAAS,GACTO,SAAU,IALO,E,sEAkBhB,IADO,EAE0BM,KAAKP,MAA9Bb,EAFD,EAECA,EAAGO,EAFJ,EAEIA,QAFJ,EAEaO,SAEpB,OACE,yBAAKE,UAAU,OACb,gCACE,+CAGF,8BACE,kBAAC,EAAD,CACElB,OAXO,sDAYPE,EAAGA,EACHN,cAAe0B,KAAKiB,kBACpB7B,SAAUY,KAAKvB,eACjB,kBAAC,EAAD,CACEU,QAASA,U,GAnCHe,aCQEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.9b960271.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n\nclass Search extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ts: \"\", //user input's string\n\t\t\tresults: [], // response results\n\t\t\tselected: {} // data need to popup\n\t\t}\n\n\t\tthis.handleInput = this.handleInput.bind(this);\n\t}\n\n\thandleInput = e => {\n\t\tthis.props.onInputChange(e.target.value);\n\t};\n\n\thandleSearch = (e) => {\n\t\tlet apiUrl = this.props.apiUrl;\n\t\tlet query = `${apiUrl}&s=${this.props.s}`;\n\t\tif (e.key === \"Enter\") {\n\t\t\taxios(query)\n\t\t\t.then(({data}) => {\n\t\t\t\tconsole.log(data);\n\t\t\t\tlet results = data.Search;\n\t\t\t\tconsole.log(results);\n\t\t\t\tthis.props.onSearch(results);\n\t\t\t\tthis.setState( {results} ); //results : results\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\talert(err);\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<section className=\"searchbox-section\">\n\t\t\t\t\t<input \tclassName = \"searchbox\" \n\t\t\t\t\t\t\ttype = \"text\" \n\t\t\t\t\t\t\tplaceholder = \"Search for a movie...\"\n\t\t\t\t\t\t\tonChange = {this.handleInput}\n\t\t\t\t\t\t\tonKeyPress = {this.handleSearch}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nexport default Search;","import React, { Component } from 'react';\n\nclass Result extends Component {\n    render() {\n        const {result} = this.props;\n        return (\n            // <div className=\"result-box\">\n            //     <img className=\"result-box__poster\" src={result.Poster} alt=\"\"/>\n            //     <h3 className=\"result-box__title\">{result.Title}</h3>\n            // </div>\n              <div className=\"card\" style={{ width: \"18rem\" }}>\n                <img className=\"card-img-top\" src={result.Poster} alt=\"Card image cap\" />\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{result.Title}</h5>\n                  <p className=\"card-text\">\n                    Some quick example text to build on the card title and make up the bulk of\n                    the card's content.\n                  </p>\n                  \n                  <a href=\"#\" className=\"btn btn-primary\">\n                    Go somewhere\n                  </a>\n                  <a href=\"#\" className=\"btn btn-primary\">\n                    Go some\n                  </a>\n                </div>\n              </div>\n        )\n    }\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport Result from './Result';\n\nclass Results extends Component {\n\n    render() {\n        const {results} = this.props;\n        return (\n            <section className=\"results-section\">\n                <div class=\"container\">\n                    <div className=\"card-columns\">\n                        {results.map(result => (\n                            <Result key={result.imdbID} result={result}></Result>\n                        ))}\n                    </div>\n                </div>\n\n\n            </section>            \n        )\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport Search from './components/Search';\nimport Results from './components/Results';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n\t\t\ts: \"\", //user input's string\n\t\t\tresults: [], // response results\n\t\t\tselected: {} // data need to popup\n\t\t}\n  }\n\n  handleInputChange = val => {\n    this.setState({ s:val });\n  }\n\n  handleSearch = results => {\n    this.setState({ results} );\n  }\n\n  render() {\n    const apiUrl = \"http://www.omdbapi.com/?i=tt3896198&apikey=2911792a\";\n    const { s, results, selected } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Movie Database</h1>\n          \n        </header>\n        <main>\n          <Search \n            apiUrl={apiUrl} \n            s={s}\n            onInputChange={this.handleInputChange} \n            onSearch={this.handleSearch} />\n          <Results\n            results={results}\n            />\n        </main>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}